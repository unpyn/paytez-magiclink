{"version":3,"file":"static/js/959.c3ffae75.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/contracts/src.ts/index.ts","../node_modules/@ethersproject/contracts/src.ts/_version.ts"],"sourcesContent":["\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter | string, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n","export const version = \"contracts/5.7.0\";\n"],"names":["logger","Logger","resolveName","resolver","nameOrPromise","name","_context","sent","throwArgumentError","prev","abrupt","getAddress","t0","throwError","errors","UNSUPPORTED_OPERATION","operation","next","address","stop","_callee","resolveAddresses","value","paramType","Array","isArray","_context2","Promise","all","map","index","type","components","baseType","reject","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","_callee2","populateTransaction","contract","fragment","args","overrides","length","inputs","shallowCopy","pop","checkArgumentCount","signer","from","resolveProperties","override","then","check","__awaiter","_this","_regeneratorRuntime","mark","_callee3","wrap","_context3","provider","_context4","resolvedAddress","resolved","data","interface","encodeFunctionData","tx","to","ro","nonce","BigNumber","toNumber","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","accessList","accessListify","gas","intrinsic","bytes","arrayify","i","add","roValue","isZero","payable","customData","ccipReadEnabled","leftovers","Object","keys","filter","key","concat","l","JSON","stringify","join","_callee4","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","deepCopy","parsed","parseLog","e","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","signerOrProvider","_len3","arguments","_key3","blockTag","undefined","_context6","push","deployTransaction","_deployed","call","result","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","_callee6","buildDefault","constant","_len4","_key4","_context7","txRequest","sendTransaction","_callee7","buildSend","getEventTag","topic","RunningEvent","tag","_classCallCheck","defineReadOnly","this","_listeners","_createClass","listener","once","done","item","_this2","listenerCount","argsCopy","slice","setTimeout","apply","ErrorRunningEvent","_RunningEvent","_inherits","_super","_createSuper","FragmentRunningEvent","_RunningEvent2","_super2","contractInterface","_this3","getEventTopic","_assertThisInitialized","_this4","_get","_getPrototypeOf","prototype","format","error","decodeError","checkResultErrors","WildcardRunningEvent","_RunningEvent3","_super3","_this5","_this6","BaseContract","addressOrName","_this7","getStatic","constructor","Signer","isSigner","Provider","isProvider","uniqueFilters","forEach","filters","_len5","_key5","encodeFilterTopics","warn","catch","uniqueNames","uniqueSignatures","functions","callStatic","_len","_key","buildPopulate","estimateGas","_len2","_key2","_context5","_callee5","buildEstimate","signatures","substring","_this8","_deployedPromise","getCode","contractAddress","_this9","deployed","VoidSigner","runningEvent","_runningEvents","eventName","_normalizeRunningEvent","getEvent","Error","emit","_wrappedEmits","off","_this10","_checkRunningEvents","prepareEvent","_this11","addListener","wrappedEmit","_wrapEvent","getEmit","_toConsumableArray","on","fromBlockOrBlockhash","toBlock","_this12","_getRunningEvent","isHexString","fromBlock","getLogs","_addEventListener","_len6","_key6","run","_this13","reduce","accum","listeners","removeAllListeners","getContractAddress","Interface","isInterface","Indexed","isIndexed","Contract","_BaseContract","_super4"],"sourceRoot":""}